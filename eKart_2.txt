Part 1: Categories
‚úÖ Step 1: Create Category model
In catalog/models.py:


class Category(models.Model):
    name = models.CharField(max_length=100)

    def __str__(self):
        return self.name
#Update Product model to add category:


class Product(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()
    price = models.DecimalField(max_digits=8, decimal_places=2)
    image = models.ImageField(upload_to='products/', blank=True, null=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='products',null=True, blank=True)

    def __str__(self):
        return self.name

‚úÖ Step 2: Make migrations

python manage.py makemigrations
python manage.py migrate
‚úÖ Step 3: Update admin
In catalog/admin.py:


from .models import Product, Category

admin.site.register(Category)

Now you can add categories from admin.

‚úÖ Step 4: Update views to filter by category
In catalog/views.py:


from .models import Product, Category

def product_list(request):
    category_id = request.GET.get('category')
    if category_id:
        products = Product.objects.filter(category_id=category_id)
    else:
        products = Product.objects.all()
    categories = Category.objects.all()
    return render(request, 'product_list.html', {'products': products, 'categories': categories})

‚úÖ Step 5: Update template
Update product_list.html to show categories:


<h1>Products</h1>

<h3>Filter by Category:</h3>
<ul>
    <li><a href="/">All</a></li>
    {% for category in categories %}
        <li><a href="?category={{ category.id }}">{{ category.name }}</a></li>
    {% endfor %}
</ul>

{% for product in products %}
    <div class="product">
        {% if product.image %}
            <img src="{{ product.image.url }}" alt="{{ product.name }}">
        {% endif %}
        <h2><a href="{% url 'product_detail' product.pk %}">{{ product.name }}</a></h2>
        <p>${{ product.price }}</p>
    </div>
{% endfor %}

‚≠ê Part 2: Search
‚úÖ Step 1: Update view

In catalog/views.py:


def product_list(request):
    category_id = request.GET.get('category')
    query = request.GET.get('q')
    products = Product.objects.all()
    if category_id:
        products = products.filter(category_id=category_id)
    if query:
        products = products.filter(name__icontains=query)
    categories = Category.objects.all()
    return render(request, 'catalog/product_list.html', {'products': products, 'categories': categories})

‚úÖ Step 2: Update template
Add search form to product_list.html:


<form method="get">
    <input type="text" name="q" placeholder="Search..." value="{{ request.GET.q }}">
    <button type="submit">Search</button>
</form>

Make sure this form keeps the category filter by adding hidden input if needed:


{% if request.GET.category %}
    <input type="hidden" name="category" value="{{ request.GET.category }}">
{% endif %}

‚≠ê Part 3: User Authentication

‚úÖ Step 1: Add auth views
In catalog/views.py (add signup):


from django.contrib.auth.forms import UserCreationForm
from django.shortcuts import redirect
from django.contrib.auth import login

def signup(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('product_list')
    else:
        form = UserCreationForm()
    return render(request, 'signup.html', {'form': form})

‚úÖ Step 2: Add URLs
In catalog/urls.py:


from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path('', views.product_list, name='product_list'),
    path('product/<int:pk>/', views.product_detail, name='product_detail'),
    path('signup/', views.signup, name='signup'),
    path('login/', auth_views.LoginView.as_view(template_name='catalog/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='product_list'), name='logout'),
]

‚úÖ Step 3: Create templates
signup.html:


<h2>Signup</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Sign up</button>
</form>
<a href="{% url 'login' %}">Login</a>



login.html:

<h2>Login</h2>
<form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
</form>
<a href="{% url 'signup' %}">Sign up</a>



‚≠ê Part 4: Simple Cart (session-based)

‚úÖ Step 1: Add view to add to cart
In catalog/views.py:

def add_to_cart(request, pk):
    cart = request.session.get('cart', [])
    if pk not in cart:
        cart.append(pk)
    request.session['cart'] = cart
    return redirect('product_list')

def view_cart(request):
    cart = request.session.get('cart', [])
    products = Product.objects.filter(pk__in=cart)
    return render(request, 'catalog/cart.html', {'products': products})

‚úÖ Step 2: Add URLs
In catalog/urls.py:


urlpatterns += [
    path('add-to-cart/<int:pk>/', views.add_to_cart, name='add_to_cart'),
    path('cart/', views.view_cart, name='view_cart'),
]
‚úÖ Step 3: Update templates
Add "Add to cart" link in product_detail.html:


<a href="{% url 'add_to_cart' product.pk %}">Add to Cart</a>




Create cart.html:

<h2>Your Cart</h2>
{% for product in products %}
    <div>
        <h3>{{ product.name }}</h3>
        <p>${{ product.price }}</p>
    </div>
{% endfor %}
<a href="/">Continue Shopping</a>


‚≠ê Part 5: Order History (basic, only visible to logged in user)
‚úÖ Step 1: Create model
In catalog/models.py:


from django.contrib.auth.models import User
class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    products = models.ManyToManyField(Product)
    created_at = models.DateTimeField(auto_now_add=True)

‚úÖ Step 2: Make migrations

python manage.py makemigrations
python manage.py migrate

‚úÖ Step 3: Add view to place order
In catalog/views.py:

from django.contrib.auth.decorators import login_required

@login_required
def place_order(request):
    cart = request.session.get('cart', [])
    if cart:
        order = Order.objects.create(user=request.user)
        order.products.set(cart)
        order.save()
        request.session['cart'] = []  # clear cart
        return redirect('order_history')
    return redirect('product_list')

@login_required
def order_history(request):
    orders = Order.objects.filter(user=request.user)
    return render(request, 'catalog/order_history.html', {'orders': orders})

‚úÖ Step 4: Add URLs
In catalog/urls.py:

urlpatterns += [
    path('place-order/', views.place_order, name='place_order'),
    path('order-history/', views.order_history, name='order_history'),
]
‚úÖ Step 5: Templates
cart.html: add "Place Order":

<a href="{% url 'place_order' %}">Place Order</a>



order_history.html:

<h2>Your Orders</h2>
{% for order in orders %}
    <div>
        <h3>Order #{{ order.id }} - {{ order.created_at }}</h3>
        <ul>
        {% for product in order.products.all %}
            <li>{{ product.name }} - ${{ product.price }}</li>
        {% endfor %}
        </ul>
    </div>
{% endfor %}
<a href="/">Back to products</a>


‚úÖ Done! üéâ
You now have:

Product catalog with categories and search
Authentication
Cart
Place order
Order history

