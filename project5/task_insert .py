Task: Insert operation into Employee Table

Step 1: Set Up Your Django Project
Make sure you have Django installed. If not, you can install it using pip:

pip install django

Create a new Django project: django-admin startproject myproject

Navigate into your project directory: cd myproject

Step 2: Create a Django App : python manage.py startapp myapp
In Django, functionality is organized into apps. Create a new app within your project.

Step 3: Define Models
Open myapp/models.py and define your data models. 
# myapp/models.py
from django.db import models
class EmployeeModel(models.Model):  
    first_name = models.CharField(max_length=30)  
    last_name = models.CharField(max_length=30)  
    mobile = models.CharField(max_length=10, unique=True)  
    email = models.EmailField()  
  
    def __str__(self):  
        return (self.first_name+' '+ self.last_name)

Step 4: Register Models to Admin
Open myapp/admin.py and register your data models. 
# myapp/admin.py
from django.contrib import admin
from .models import EmployeeModel
admin.site.register(EmployeeModel)

Step 5: Set Up SQLite3 Database# myproject/settings.py
By default, Django uses SQLite3 as its database. 
Ensure your database is set up correctly in settings.py for oracle/mysql/postgrey/ms-sqlserver

Step 6: Register youy app to your project.
# myproject/settings.py
INSTALLED_APPS = [
    'myapp',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

Step 7: Migrate Your Database to create Database Tables
Run migrations to create database tables for your models:
This will create the necessary database tables (Employee ) 

python manage.py makemigrations myapp
python manage.py migrate

Step 8: Create SuperUser: python manage.py createsuperuser
UserName: test
Email: a@b.com
Password: 123
Confirm Password: 123
Press "y" to ignore password validation

Step 9: Create a new python file forms.py in your app.
# myapp/forms.py
from django.forms import fields  
from .models import EmployeeModel  
from django import forms  
class EmployeeForm(forms.ModelForm):  
    class Meta:  
        model = EmployeeModel  # To specify the model to be used to create form
        fields = '__all__'  # It includes all the fields of model

Step 10: Write your business logics as function in Views 
Define views in myapp/views.py for handling data insert operations. 
# myapp/views.py
from django.shortcuts import render
from .models import EmployeeModel  
from .forms import EmployeeForm
#display & save form data   
def insert_employee(request):
    context ={}# dictionary for initial data with field names as keys
    ob_form = EmployeeForm(request.POST or None)
    if ob_form.is_valid():
        ob_form.save()
        return HttpResponse("Data Saved")
    context['form']= ob_form
    return render(request, "insert_employee.html", context)  


Step 11: Write HTML code in Templates
You can now use  Django  templates to insert  objects in Employee.
Create HTML templates for inserting data/object in Employee. 
(You have to create folder 'templates' if it does not exists in your app
myapp/templates/insert_employee.html:
<form method="POST"   action="{% url 'insert_employee' %}" >
    {% csrf_token %}<!-- Security token -->
    {{ form.as_p }}<!-- Using the formset -->
    <input type="submit" value="Submit">
</form>

Step 12: Define URLs
Map URLs to views in myapp/urls.py:
(You need to create urls.py in your app )
# myapp/urls.py
from django.urls import path
from . import views
urlpatterns = [
   path('insert_employee/',views.insert_employee,name='insert_employee'),
    # other paths as needed
]

Include these URLs in your project's urls.py:
# myproject/urls.py
from django.contrib import admin
from django.urls import path, include
urlpatterns = [
    path('admin/', admin.site.urls),
    path('myapp/', include('myapp.urls')),
]

Step 13: Run Your Django Development Server
Finally, start the Django development server and navigate to 
http://localhost:8000/myapp/insert_employee/  
in your web browser and insert data for Employee 

python manage.py runserver
http://localhost:8000/myapp/insert_employee/ 
Sample Data for Employee 
FirstName	         LastName	Mobile	   Email		           #Autogenerated Id
Praveen	         Choudhary	9971403971 praveen.nsic@gmail.com     #id=1
Chandrasekhar    Reddy	7982164613 chandrasekhar@gmail.com  #id=2
Murali 	         Mohan	9876543211 mm@gmail.com	           #id=3
Ganesh	         Reddy	9781234565 ganesh@gmail.com	           #id=4


Step 13: navigate to admin panel urls  in your web browser and view inserted data
http://127.0.0.1:8000/admin/
and login through credentials given while creating superuser.(test/123)
